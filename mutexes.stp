#!/usr/bin/stap

# This script tries to identify contended mutex locks.

global thread_blocktime         # time of latest lock call by thread
global lock_waits[300000]               # long-lived stats on (pid,lock) blockage elapsed time
global process_names            # long-lived pid-to-execname mapping

global mutex_locks[300000];     # number of locks in progress
global mutex_stack[300000];             # flag if we already printed a stack

probe process("/lib/x86_64-linux-gnu/libpthread.so.0").function("pthread_mutex_lock") {

  if(execname() == "finisher" || execname() == "tp_osd_tp"){

    printf("\nlock_acquire, %s, %d, %p\n", execname(), tid(), $mutex)

    if (!mutex_stack[tid(), $mutex]) {
        process_names[tid()] = execname();
        mutex_stack[tid(), $mutex] = 1;
        printf("\nCallstack, %s, %d, mutex %p stack trace:\n", execname(), tid(), $mutex)
          print_ubacktrace();
      }
    
    if(mutex_locks[$mutex]++ > 0){    # Contended
      printf("\nlock_contended, %s, %d, %p\n", execname(), tid(), $mutex)
      thread_blocktime[tid()] = gettimeofday_us();
    }

  }
}

probe process("/lib/x86_64-linux-gnu/libpthread.so.0").function("pthread_mutex_lock").return {

  if(execname() == "finisher" || execname() == "tp_osd_tp"){
    printf("\nlock_acquired, %s, %d, %p\n", execname(), tid(),  @entry($mutex))
    t = tid();
    ts = thread_blocktime[t];
    if (ts) {
      elapsed = gettimeofday_us() - ts;
      lock_waits[tid(), @entry($mutex)] <<< elapsed;
      delete thread_blocktime[tid()]
    }
  }
}


probe process("/lib/x86_64-linux-gnu/libpthread.so.0").function("pthread_mutex_unlock") {
  if(execname() == "finisher" || execname() == "tp_osd_tp"){
      printf("\nlock_release, %s, %d, %p\n", execname(), tid(), $mutex)
      if (--mutex_locks[$mutex] <= 0)
        delete mutex_locks[$mutex];
  }
}


probe end {
  // TODO: sort output by sum of wait times, rather than count.
  printf("Thread Name[tid], Mutex Address, Contended Times, Total Wait Time(us), Avg Wait Time(us)\n")
  foreach ([tid, m] in lock_waits-) {
    printf ("%s[%d],%p,%d,%d,%d\n",
        process_names[tid], tid, m,
        @count(lock_waits[tid,m]),
        @sum(lock_waits[tid,m]),
        @avg(lock_waits[tid,m]));
  }
}
